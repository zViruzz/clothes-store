generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String     @id @default(cuid()) // ID único del usuario
  name          String? // Nombre del usuario
  email         String?    @unique // Correo único
  emailVerified Boolean? // Fecha de verificación de correo
  image         String? // Imagen del usuario
  accounts      Account[] // Relación con cuentas (Proveedores)
  purchases     Purchase[] // Relación con las compras realizadas
  createdAt     DateTime   @default(now()) // Fecha de creación
  updatedAt     DateTime   @updatedAt // Fecha de actualización
}

model Account {
  id                String   @id @default(cuid()) // ID único de la cuenta
  id_token          String
  userId            String // ID del usuario asociado
  user              User     @relation(fields: [userId], references: [id]) // Relación con User
  type              String // Tipo de cuenta (e.g., oauth)
  provider          String // Nombre del proveedor (e.g., google, facebook)
  providerAccountId String // ID del proveedor (e.g., Google sub)
  accessToken       String? // Token de acceso, si aplica
  expiresAt         Int? // Fecha de expiración del token (timestamp)
  createdAt         DateTime @default(now()) // Fecha de creación
  updatedAt         DateTime @updatedAt // Fecha de actualización
}

model Product {
  id           Int      @id @default(autoincrement())
  name         String   @unique @db.VarChar(255)
  title        String   @db.VarChar(255)
  category     String
  description  String   @db.Text
  price        Float    @default(0)
  sizes        String[]
  color_scheme String[]
  url_images   String[]
  createdAt    DateTime @default(now())
}

model Purchase {
  id             String       @id
  userId         String // Relación con el usuario que realizó la compra
  user           User         @relation(fields: [userId], references: [id]) // Relación con User
  paymentData    PaymentData  @relation(fields: [paymentDataId], references: [id]) // Relación con datos de pago
  paymentDataId  String // ID de los datos de pago
  shipmentData   ShipmentData @relation(fields: [shipmentDataId], references: [id]) // Relación con datos de envío
  shipmentDataId String // ID de los datos de envío
  cartItems      CartItem[] // Relación con los artículos del carrito
  createdAt      DateTime     @default(now()) // Fecha de creación de la compra
  updatedAt      DateTime     @updatedAt // Fecha de actualización
}

model PaymentData {
  id             String         @id @default(cuid()) // ID único para datos de pago
  deliveryMethod DeliveryMethod // Método de entrega (enum)
  paymentMethod  PaymentMethod // Método de pago (enum)
  Purchase       Purchase[]
}

model ShipmentData {
  id           String     @id @default(cuid()) // ID único para datos de envío
  name         String? // Nombre del destinatario
  address      String? // Dirección del destinatario
  mobileNumber String // Número de móvil del destinatario
  city         String? // Ciudad del destinatario
  zip          String? // Código postal del destinatario
  Purchase     Purchase[]
  createdAt    DateTime   @default(now()) // Fecha de creación de la compra
}

model CartItem {
  id         String   @id @default(cuid()) // ID único del artículo
  purchaseId String // Relación con la compra
  purchase   Purchase @relation(fields: [purchaseId], references: [id]) // Relación con Purchase
  name       String // Nombre del producto
  title      String // Título del producto
  category   String // Categoría del producto
  price      Float // Precio del producto
  color      String // Color del producto
  size       String // Talla del producto
  urlImages  String[] // URLs de imágenes del producto
  quantity   Int // Cantidad del producto
}

enum DeliveryMethod {
  delivery
  pickup
}

enum PaymentMethod {
  transfer
}
